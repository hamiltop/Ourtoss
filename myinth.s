; Generated by c86 (BYU-NASM) 5.1 (beta) from myinth.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
tickCount:
	DW	0
	ALIGN	2
reset:
	; >>>>> Line:	5
	; >>>>> void reset(void) { 
	jmp	L_myinth_1
L_myinth_2:
	; >>>>> Line:	6
	; >>>>> exit(0x0); 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_myinth_1:
	push	bp
	mov	bp, sp
	jmp	L_myinth_2
L_myinth_4:
	DB	"TICK ",0
	ALIGN	2
tick:
	; >>>>> Line:	9
	; >>>>> void tick(void) { 
	jmp	L_myinth_5
L_myinth_6:
	; >>>>> Line:	10
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	11
	; >>>>> printString("TICK "); 
	mov	ax, L_myinth_4
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	12
	; >>>>> printInt(tickCount++); 
	mov	ax, word [tickCount]
	inc	word [tickCount]
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	13
	; >>>>> printNewLine(); 
	call	printNewLine
	mov	sp, bp
	pop	bp
	ret
L_myinth_5:
	push	bp
	mov	bp, sp
	jmp	L_myinth_6
L_myinth_11:
	DB	") IGNORED",0
L_myinth_10:
	DB	"KEYPRESS (",0
L_myinth_9:
	DB	"DELAY COMPLETE ",0
L_myinth_8:
	DB	"DELAY KEY PRESSED ",0
	ALIGN	2
key:
	; >>>>> Line:	16
	; >>>>> void key(void) { 
	jmp	L_myinth_12
L_myinth_13:
	; >>>>> Line:	18
	; >>>>> asm ("cli"); 
	cli
	; >>>>> Line:	19
	; >>>>> switch(KeyBuffer) { 
	mov	ax, word [KeyBuffer]
	sub	ax, 100
	jne	L_myinth_15
L_myinth_16:
	; >>>>> Line:	21
	; >>>>> asm("sti"); 
	sti
	; >>>>> Line:	22
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	23
	; >>>>> printString("DELAY KEY PRESSED "); 
	mov	ax, L_myinth_8
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	24
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	25
	; >>>>> for(i=0;i<5000;i++); 
	mov	word [bp-2], 0
	jmp	L_myinth_18
L_myinth_17:
L_myinth_20:
	inc	word [bp-2]
L_myinth_18:
	cmp	word [bp-2], 5000
	jl	L_myinth_17
L_myinth_19:
	; >>>>> Line:	26
	; >>>>> printString("DELAY COMPLETE "); 
	mov	ax, L_myinth_9
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	27
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	28
	; >>>>> break; 
	jmp	L_myinth_14
L_myinth_15:
	; >>>>> Line:	30
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	31
	; >>>>> printString("KEYPRESS ("); 
	mov	ax, L_myinth_10
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	32
	; >>>>> printChar(KeyBuffer); 
	push	word [KeyBuffer]
	call	printChar
	add	sp, 2
	; >>>>> Line:	33
	; >>>>> printString(") IGNORED"); 
	mov	ax, L_myinth_11
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	34
	; >>>>>  
	call	printNewLine
L_myinth_14:
	; >>>>> Line:	37
	; >>>>> asm("sti"); 
	sti
	mov	sp, bp
	pop	bp
	ret
L_myinth_12:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_myinth_13
